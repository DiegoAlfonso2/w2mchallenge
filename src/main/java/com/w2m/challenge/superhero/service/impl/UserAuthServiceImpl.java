package com.w2m.challenge.superhero.service.impl;

import java.util.Optional;

import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.stereotype.Service;

import com.w2m.challenge.superhero.model.auth.User;
import com.w2m.challenge.superhero.repository.UserRepository;
import com.w2m.challenge.superhero.service.TokenService;
import com.w2m.challenge.superhero.service.UserAuthService;

@Service
public class UserAuthServiceImpl implements UserAuthService {

	private UserRepository userRepository;
	private TokenService tokenService;
	
	@Autowired
	public UserAuthServiceImpl(UserRepository userRepository, TokenService tokenService) {
		this.userRepository = userRepository;
		this.tokenService = tokenService;
	}

	public String authenticate(String username, String password) {
		var hashedPassword = DigestUtils.sha256Hex(username + password);
		var user = userRepository
				.findByUsernameAndHashedPassword(username, hashedPassword)
				// Tradeoff: using BadCredentialsException adds coupling to Spring Security Framework
				// On the other hand, making a custom exception for this forces me to handle two different kind
				// of exceptions, since auth filter requires a subclass of AuthenticationException to be thrown.
				// In a project this size, with a low probability to change security framework, it isn't worth 
				// to be so nitpicky.
				.orElseThrow(() -> new BadCredentialsException("Invalid username / password"));
		return tokenService.generateTokenFor(user.getUsername(), user.getRoles());
	}

	// TODO throw proper type of exception (despite the fact that this should never happen if the token
	// has the right signature, because it means that it was generated by /login in a legitimate way,
	// which in turns means that right claims should be there)
	@Override
	public User getUserDetailsFromToken(String token) {
		var claims = tokenService.getTokenClaims(token);
		var user = new User();
		user.setUsername(
				Optional.ofNullable(claims.get(TokenService.USERNAME_CLAIM_KEY))
				.map(String::valueOf)
				.orElseThrow(() -> new BadCredentialsException("Username not provided in JWT")));
		user.setRoles(
				Optional.ofNullable(claims.get(TokenService.ROLE_LIST_CLAIM_KEY))
				.map(String::valueOf)
				.orElseThrow(() -> new BadCredentialsException("Roles not provided in JWT")));
		return user;
	}

}
